exit
job.provider_job_id
job
exit
c
exit
c
params
params[:hook]
params
c
t.captured?
t.status.captured?
t.status
t.subscription?
t
c
t
c
t
c
t.reload
t
c
self
t
c
t.status_was
t.status
self
t
c
response.direct_response.avs_response
response.direct_response.transaction_id
response.direct_response
c
profile.reload
profile.destroyed?
profile.present?
c
profile.payments.first
profile.destroyed?
profile.reload
c
profile.reload
profile.destroyed?
profile
c
resource.profile_id
c
Accounting::Payment.find_or_initialize_by(payment_profile_id: payload[:id])
resource.profile_id ||= profile.id
profile
c
profile
Accounting::Profile.find_by(profile_id: payload[:customer_profile_id]).id
Accounting::Profile.find_by(profile_id: payload[:customer_profile_id])
payload
Accounting::Profile.all.map(&:profile_id)
Accounting::Profile.all.map(&:id)
resource
profile.details
profile
resource.profile_id
resource.reload.profile
resource.profile
resource
resource.details
c
payload
resource.details
resource.profile_id ||= profile.id
profile.id
profile
resource
c
payment
service.sync!
c
service.sync!
c
service.payload
service
service.sync!
payload[:id]
payment[:id]
payment
payload
service.sync!
c
service.sync!
c
service.sync!
c
service.sync!
c
service.sync!
c
puts resource.details.to_yaml
resource.details
c
addr.errors.full_messages.any? { |m| m =~ /E00039/ }
addr.errors.full_messages
addr.valid?
addr
c
response.address_id
c
resource.errors.full_messages.to_sentence
resource.errors.full_messages.map(&:to_sentences)
resource.errors.full_messages.map(&:to_sentence)
resource.errors.full_messages
resource.valid?
c
puts xml
c
resource.valid?
c
puts resource.details.to_yaml
resource.details
c
payload
c
resource.subscription.start_date
resource.subscription
resource
c
payment
profile
c
signature
c
request.body.read
response.raw
response.body
response.raw.body
response
request.body.raw
request.raw.body
request.body.to_s
request.body
response.body
request.headers['X-Anet-Signature']
request.headers
headers
header
headers
c
payload[:entity_name].try(:titleize)
e.message
self
c
response.raw.body
response
c
response.present?
response.message_code
response.message_text
response.raw.body
response.success?
response
c
e.message
entity_name
c
payload
c
e.message
entity_name
c
next_transaction
payload
c
puts xml
exit
puts xml
c
puts xml
c
payload
exit
next_transaction
exit
next_transaction
exit
trial_occurrences
exit
options
c
exit
Fields::SUBSCRIPTION_INFO_ENTITY_DESCRIPTION
puts @subscription_detail
exit
build_entity(@subscription_detail, Fields::SUBSCRIPTION_INFO_ENTITY_DESCRIPTION)
Fields::SUBSCRIPTION_INFO_ENTITY_DESCRIPTION
@subscription_detail
c
puts @subscription_detail.to_xml
@subscription_detail
c
response = (connection.start {|http| http.request(request)})
c
response.body
response.raw.body
response = (connection.start {|http| http.request(request)})
(connection.start {|http| http.request(request)})
c
puts @xml
@xml
c
payload
c
payload
c
resource.save
puts resource.attributes.to_yaml
c
puts resource.attributes.to_yaml
c
payload
c
payload
c
